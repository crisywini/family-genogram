package co.crisi.mapper;

import co.crisi.data.PersonInfo;
import co.crisi.mapper.PersonMapper;
import co.crisi.objectmother.PersonMother;
import lombok.val;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;

import static org.assertj.core.api.Assertions.assertThat;


class PersonMapperTest {


    private final PersonMapper personMapper = Mappers.getMapper(PersonMapper.class);

    @Nested
    class ToInfo {

        @Test
        @DisplayName("Entity to Info -> should map correctly the personalId")
        void whenNormalEntity_shouldMapToNormalInfoWithoutAutogeneratedId() {
            val person = PersonMother.randomSavedWithFathers();

            val personInfo = personMapper.mapToInfo(person);

            assertThat(personInfo)
                    .extracting(PersonInfo::getPersonalId, PersonInfo::getName, PersonInfo::getLastName)
                    .contains(person.getPersonalId(), person.getName(), person.getLastName());
        }

        @Test
        @DisplayName("Entity to Info -> should map parents")
        void whenNormalEntity_shouldMapParentsToo() {
            val person = PersonMother.randomSavedWithFathers();
            val mother = personMapper.mapToInfo(person.getMother());
            val father = personMapper.mapToInfo(person.getFather());

            val personInfo = personMapper.mapToInfo(person);

            assertThat(personInfo)
                    .extracting(PersonInfo::getMother, PersonInfo::getFather)
                    .contains(mother, father);
        }

        @Test
        @DisplayName("Entity to Info -> should map great grand parents")
        void whenEntityWithGreatGrandParents_shouldMapThemAll() {
            val person = PersonMother.randomWithGreatGrandParents();
            val grandMotherMother = personMapper.mapToInfo(person.getMother().getMother());
            val grandFatherMother = personMapper.mapToInfo(person.getMother().getFather());
            val grandMotherFather = personMapper.mapToInfo(person.getFather().getMother());
            val grandFatherFather = personMapper.mapToInfo(person.getFather().getFather());

            val personInfo = personMapper.mapToInfo(person);

            assertThat(personInfo)
                    .extracting(pi -> pi.getMother().getMother(),
                            pi -> pi.getMother().getFather(),
                            pi -> pi.getFather().getMother(),
                            pi -> pi.getFather().getFather())
                    .contains(grandMotherMother, grandFatherMother, grandMotherFather, grandFatherFather);
        }

    }

    @Nested
    class ToEntity {

    }

}